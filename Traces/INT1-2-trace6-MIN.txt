Please enter the proposal number (1-10) or 'q' to quit: 6

Detection: MINIMAL COST FLOW problem.

Capacity Matrix:
        S    A    B    C    D    T
    ------------------------------
 S |    0    4    2    0    0    0
 A |    0    0    0    4    0    1
 B |    0    0    0    4    2    0
 C |    0    0    0    0    2    2
 D |    0    0    0    0    0    2
 T |    0    0    0    0    0    0

Cost Matrix:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    1    0    0    0
 A |    0    0    0    2    0    4
 B |    0    0    0    1    5    0
 C |    0    0    0    0    3    1
 D |    0    0    0    0    0    6
 T |    0    0    0    0    0    0
Enter the source node (as a letter, e.g. 'a'): s
Enter the target node (as a letter, e.g. 'b'): t
Enter the desired total flow (F): 4

Running Bellman algorithm (from 's' to 't')
Step 0 : [0, '∞', '∞', '∞', '∞', '∞']
Step 1 : [0, 3, 1, '∞', '∞', '∞']
Step 2 : [0, 3, 1, 2, 6, '∞']
Step 3 : [0, 3, 1, 2, 5, 3]
Step 4 : [0, 3, 1, 2, 5, 3]
🔁 Stopping early: no updates for 2 consecutive steps.

Shortest paths from source:
 - Node s: distance = 0, path = ['s']
 - Node a: distance = 3, path = ['s', 'a']
 - Node b: distance = 1, path = ['s', 'b']
 - Node c: distance = 2, path = ['s', 'b', 'c']
 - Node d: distance = 5, path = ['s', 'b', 'c', 'd']
 - Node t: distance = 3, path = ['s', 'b', 'c', 't']

Running Min Cost Flow algorithm (from 's' to 't', F = 4)


Residual Capacity:
        S    A    B    C    D    T
    ------------------------------
 S |    0    4    2    0    0    0
 A |    0    0    0    4    0    1
 B |    0    0    0    4    2    0
 C |    0    0    0    0    2    2
 D |    0    0    0    0    0    2
 T |    0    0    0    0    0    0

Residual Cost:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    1    0    0    0
 A |   -3    0    0    2    0    4
 B |   -1    0    0    1    5    0
 C |    0   -2   -1    0    3    1
 D |    0    0   -5   -3    0    6
 T |    0   -4    0   -1   -6    0

Iteration 1:
Augmenting path: S -> B -> C -> T
Bottleneck flow: 2
Path cost: 6
Updated residual graphs:

Residual Capacity:
        S    A    B    C    D    T
    ------------------------------
 S |    0    4    0    0    0    0
 A |    0    0    0    4    0    1
 B |    2    0    0    2    2    0
 C |    0    0    2    0    2    0
 D |    0    0    0    0    0    2
 T |    0    0    0    2    0    0

Residual Cost:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    1    0    0    0
 A |   -3    0    0    2    0    4
 B |   -1    0    0    1    5    0
 C |    0   -2   -1    0    3    1
 D |    0    0   -5   -3    0    6
 T |    0   -4    0   -1   -6    0

Iteration 2:
Augmenting path: S -> A -> T
Bottleneck flow: 1
Path cost: 7
Updated residual graphs:

Residual Capacity:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    0    0    0    0
 A |    1    0    0    4    0    0
 B |    2    0    0    2    2    0
 C |    0    0    2    0    2    0
 D |    0    0    0    0    0    2
 T |    0    1    0    2    0    0

Residual Cost:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    1    0    0    0
 A |   -3    0    0    2    0    4
 B |   -1    0    0    1    5    0
 C |    0   -2   -1    0    3    1
 D |    0    0   -5   -3    0    6
 T |    0   -4    0   -1   -6    0

Iteration 3:
Augmenting path: S -> A -> C -> D -> T
Bottleneck flow: 1
Path cost: 14
Updated residual graphs:

Residual Capacity:
        S    A    B    C    D    T
    ------------------------------
 S |    0    2    0    0    0    0
 A |    2    0    0    3    0    0
 B |    2    0    0    2    2    0
 C |    0    1    2    0    1    0
 D |    0    0    0    1    0    1
 T |    0    1    0    2    1    0

Residual Cost:
        S    A    B    C    D    T
    ------------------------------
 S |    0    3    1    0    0    0
 A |   -3    0    0    2    0    4
 B |   -1    0    0    1    5    0
 C |    0   -2   -1    0    3    1
 D |    0    0   -5   -3    0    6
 T |    0   -4    0   -1   -6    0

Final result:
Achieved flow: 4
Minimum cost: 27

✅ Min-Cost Flow completed:
   ➤ Total flow sent: 4
   ➤ Total cost: 27